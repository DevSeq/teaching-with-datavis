-10191657, -10316211, -11058480, -10435062,
-8873957, -7237434, -5092364, -3501387, -2375076,
-1408466, -562765, -114047, -13105, 10134157,
10014685, 10072264, 10216850, 11105011,
10763303, 10680178, 9938587, 10328779, 10498065,
11462719, 11048682, 9671602, 8059112, 5962386, 4402017,
3376338, 2420464, 1243054, 350761, 60228))
View(dat)
source('~/Datavis/rcharts_pyramids_dev.R')
d2 <- dPyramid("US", 2014)
d2
source('~/Datavis/rcharts_pyramids_dev.R')
d2 <- dPyramid("US", 2014)
d2
d2 <- dPyramid("US", seq(2014, 2044, 5), colors = c("red", "blue"))
d2
d2 <- dPyramid("US", seq(2014, 2044, 5), colors = c("red", "blue"))
d2
d2 <- dPyramid("US", 2014)
d2
source('~/Datavis/rcharts_pyramids_dev.R')
d2 <- dPyramid("US", 2014)
d2
d2 <- dPyramid("US", seq(2014, 2044, 5), colors = c("red", "blue"))
d2
dat <- data.frame(Age = rep(c("0-4", "5-9", "10-14", "15-19", "20-24", "25-29", "30-34", "35-39", "40-44", "45-49",
"50-54", "55-59", "60-64", "65-69", "70-74", "75-79", "80-84", "85-89", "90-94",
"95-99", "100+"), 2),
Gender = rep(c("Male", "Female"), each = 21),
Population = c(-10597149, -10463160, -10520040, -10731809,
-11704248, -11162189, -10805435, -9918820,
-10191657, -10316211, -11058480, -10435062,
-8873957, -7237434, -5092364, -3501387, -2375076,
-1408466, -562765, -114047, -13105, 10134157,
10014685, 10072264, 10216850, 11105011,
10763303, 10680178, 9938587, 10328779, 10498065,
11462719, 11048682, 9671602, 8059112, 5962386, 4402017,
3376338, 2420464, 1243054, 350761, 60228),
ord = 1:42)
library(rCharts)
dat <- dat[order(rev(dat$ord)), ]
dat$Population <- dat$Population / 1000000
d1 <- dPlot(
x = "Population",
y = "Age",
groups = "Gender",
data = dat,
type = 'bar')
d1$yAxis(type = "addCategoryAxis", orderRule = "ord")
d1$xAxis(
type = "addMeasureAxis",
outputFormat = "#!
function(d) {
return d3.format(',.1f')(Math.abs(d)) + 'M'
}
!#"
)
d1$legend(
x = 60
, y = 10
, width = 700
, height = 20
, horizontalAlign = "left"
)
#will not work with multiple inline charts on the same page
#however should work fine if using iframes
d1$setTemplate( afterScript =
"
<script>
myChart.axes[0].shapes.selectAll('text').text(function(d){
return Math.abs(d);
})
</script>
")
d1
source('~/Datavis/rcharts_pyramids_dev.R')
d2 <- dPyramid("US", 2014)
d2
d2 <- dPyramid("US", 2014)
source('~/Datavis/rcharts_pyramids_dev.R')
d2 <- dPyramid("US", 2014)
d2 <- dPyramid("US", 2014)
d2
d2 <- dPyramid("US", 2014, colors = c("red", "green"))
d2
d2 <- dPyramid("US", c(2014, 2015, 2016), colors = c("red", "green"))
d2
source('~/Datavis/rcharts_pyramids_dev.R')
d2 <- dPyramid("US", c(2014, 2015, 2016), colors = c("red", "green"))
d2
d2 <- dPyramid("US", c(2014, 2015, 2016), colors = c("red", "green"))
source('~/Datavis/rcharts_pyramids_dev.R')
d2 <- dPyramid("US", c(2014, 2015, 2016), colors = c("red", "green"))
d2
c1 <- dPyramid("CB", seq(1974, 1984, 1))
c1
c1
source('~/Datavis/rcharts_pyramids_dev.R')
d1 <- dPyramid("US", 2014)
d1
source('~/Datavis/rcharts_pyramids_dev.R')
d1 <- dPyramid("US", seq(2015, 2020, 2025, 2030))
d1 <- dPyramid("US", c(2015, 2020, 2025, 2030))
d1
source('~/Datavis/rcharts_pyramids_dev.R')
d1 <- dPyramid("US", c(2015, 2020, 2025, 2030))
d1
source('~/Datavis/rcharts_pyramids_dev.R')
c <- dPyramid("CB", seq(1974, 1981, 1))
c
source('~/Datavis/rcharts_pyramids_dev.R')
i1 <- dPyramid("IN", seq(1990, 2050, 10), colors = c("orange", "green"))
i1 <- dPyramid("IN", seq(1994, 2044, 10), colors = c("orange", "green"))
q1 <- dPyramid("QA", seq(1994, 2044, 10), colors = c("darkred", "silver"))
q1
i1
source('~/Datavis/rcharts_pyramids_dev.R')
i1 <- dPyramid("IN", seq(1994, 2044, 10), colors = c("orange", "green"))
q1 <- dPyramid("QA", seq(1994, 2044, 10), colors = c("darkred", "silver"))
q1
i1
c1 <- dPyramid("CH", seq(1990, 2050, 10), colors = c("yellow", "red"))
c1
c2 <- nPyramid("CH", 2044)
c2
c2 <- nPyramid("CH", 2044, colors = c("yellow", red))
c2 <- nPyramid("CH", 2044, colors = c("yellow", "red"))
c2
source('~/Datavis/rcharts_pyramids_dev.R')
g <- dPyramid("GM", seq(2010, 2050, 10), colors = c("black", "red"))
g
i <- dPyramid("IT", seq(2010, 2050, 10), colors = c("blue", "green"))
i
source('~/Datavis/rcharts_pyramids_dev.R')
i <- dPyramid("IT", seq(1994, 2044, 10), colors = c("red", "green"))
i
source('~/Datavis/rcharts_pyramids_dev.R')
i <- dPyramid("IT", seq(1994, 2044, 10), colors = c("red", "green"))
i
uae <- dPyramid("AE", seq(2004, 2044, 10))
uae
uae <- dPyramid("AE", seq(1984, 2044, 10))
uae <- dPyramid("AE", seq(1994, 2044, 10))
uae
source('~/Datavis/rcharts_pyramids_dev.R')
g <- hPyramid("GR", 2014)
g
install.packages('GGally')
library(devtools)
install_github('ramnathv/rCharts@dev')
source('~/Datavis/rcharts_pyramids_dev.R')
i <- dPyramid("IT", seq(2000, 2050, 10), colors = c("green", "red"))
i
source('~/Datavis/rcharts_pyramids_dev.R')
g <- nPyramid("GM", 2014, colors = c("black", "red"))
g
q <- nPyramid("QA", 2014, colors = c("darkred", "silver"))
q
q <- nPyramid("QA", 2014, colors = c("darkred", "silver"))
q
source('~/Datavis/rcharts_pyramids_dev.R')
q <- nPyramid("QA", 2014, colors = c("darkred", "silver"))
q
source('~/Datavis/rcharts_pyramids_dev.R')
q <- nPyramid("QA", 2014, colors = c("darkred", "silver"))
q
g2 <- dPyramid("GM", seq(1994, 2044, 10), colors = c("black", "red"))
g2
source('~/GitHub/teaching-with-datavis/pyramids/rcharts_pyramids.R')
d <- dPyramid("DK", seq(2000, 2050, 10))
d <- dPyramid("DK", seq(2000, 2050, 10))
d <- dPyramid("DE", seq(2000, 2050, 10))
d <- dPyramid("DA", seq(2000, 2050, 10), colors = c("red", "ivory"))
d
install.packages(c('XML', 'reshape2', 'devtools', 'plyr'))
library(devtools)
install_github('ramnathv/rCharts@dev')
source('https://raw.githubusercontent.com/walkerke/teaching-with-datavis/master/pyramids/rcharts_pyramids.R')
source('~/GitHub/teaching-with-datavis/pyramids/rcharts_pyramids.R')
hPyramid('JA', 2050, colors = c('blue', 'red'))
source('~/GitHub/teaching-with-datavis/pyramids/rcharts_pyramids.R')
cb <- getAgeTable('CB', c(1974, 1980))
attach(cb)
View(cb)
View(cb)
tapply(total, Year, sum)
detach(cb)
cb <- getAgeTable('CB', c(1974, 1979))
attach(cb)
tapply(total, Year, sum)
source('https://raw.githubusercontent.com/walkerke/teaching-with-datavis/master/pyramids/rcharts_pyramids.R')
hPyramid('JA', 2050)
hPyramid('JA', 2050, colors = c('blue', 'red'))
source("https://github.com/walkerke/teaching-with-datavis/blob/master/pyramids/rcharts_pyramids.R")
source("https://raw.githubusercontent.com/walkerke/teaching-with-datavis/master/pyramids/rcharts_pyramids.R")
hPyramid('CA', 2014, colors = c("red", "white"))
hPyramid('CA', 2014, colors = c("red", "black"))
devtools::install_github('hadley/tidyr')
install.packages('installr')
library(installr)
updateR()
devtools::install_github('hadley/tidyr')
library(devtools)
install_github('hadley/tidyr')
library(foreign)
library(ggplot2)
library(dplyr)
library(scales)
orig <- read.dta('C:/Users/kylewalker/Documents/Research/Migration/July 2013/derived/cleaned.dta')
## Set up for plot of distance by year, generation
## To get started, we will use dplyr to format our data
agedist <- orig %.%
select(year, yob, zdistance, perwt) %.%
mutate(
gens = ifelse(yob > 1981, "millenials",
ifelse(yob > 1964 & yob < 1982, "genx",
ifelse(yob > 1945 & yob < 1965, "boomers",
ifelse(yob < 1946, "greatest", "other"))))) %.%
group_by(gens, year) %.%
summarise(avgdist = weighted.mean(zdistance, perwt))
## Get ready for plotting with ggplot2
agedist$factor <- factor(agedist$gens,
levels=c("greatest", "boomers", "genx", "millenials"),
labels = c("Born before 1946", "Baby boomers", "Generation X", "Millenials"))
genplot <- ggplot(agedist, aes(x = year, y = avgdist, color = factor)) +
geom_line(size = 1, aes(group = factor)) +
geom_point(size = 4) +
theme_bw() +
geom_hline(yintercept = 0, color = "black", linetype = "dashed") +
labs(list(x = "ACS Year", y = "Average std. distance from city core", color = "")) +
theme(legend.position="bottom",
axis.title.y = element_text(size = 18),
axis.title.x = element_text(size = 18),
legend.text = element_text(size = 14))
genplot
source('~/GitHub/teaching-with-datavis/pyramids/rcharts_pyramids.R')
hPyramid('US', 2014)
library(MASS)
dim(Boston)
names(Boston)
?Boston
summary(Boston)
myvalue <- c(16, 18, 5, 14, 10)
myXaxis <- c(1,2,3,4,5)
myfactor <- c("old", "old", "old", "new", "new")
mydf <- data.frame(myvalue, myXaxis, myfactor)
mygroup <- c(1, 1, 1, 2, 2)
mydf <- data.frame(myvalue, myXaxis, mygroup)
library(rCharts)
View(mydf)
d1 <- dPlot(
myvalue ~ myXaxis,
data = mydf,
type = 'line'
)
d1
d1$xAxis(type = 'addMeasureAxis')
d1
d1$xAxis(type = 'addMeasureAxis')
d1
d1 <- dPlot(
myvalue ~ myXaxis,
data = mydf,
type = 'line'
)
d1$xAxis(type = 'addMeasureAxis')
d1$yAxis(type = 'addMeasureAxis')
d1
library(rCharts)
d1 <- dPlot(
myvalue ~ myXaxis,
data = mydf,
type = 'line'
)
d1
d1$xAxis(orderRule = 'myXaxis')
d1
d1$colorAxis(
type = 'addColorAxis',
colorSeries = 'mygroup')
d1
d1$colorAxis(
type = 'addColorAxis',
colorSeries = 'mygroup',
palette = c('red', 'blue'))
d1
myvalue <- c(16, 18, 5, 14, 10)
myXaxis <- c(1,2,3,4,5)
myfactor <- c("old", "old", "old", "new", "new")
mydf <- data.frame(myvalue, myXaxis, myfactor)
d1 <- dPlot(
myvalue ~ myXaxis,
data = mydf,
type = 'line'
)
d1$xAxis(orderRule = 'myXaxis')
d1$colorAxis(
type = 'addColorAxis',
colorSeries = 'myfactor',
palette = c('red', 'blue'))
d1
d1 <- dPlot(
myvalue ~ myXaxis,
data = mydf,
type = 'line'
)
d1$xAxis(orderRule = 'myXaxis')
d1$colorAxis(
type = 'addColorAxis',
colorSeries = 'mygroup',
palette = c('red', 'blue'))
d1
cbind(mydf, mygroup)
mydf <- cbind(mydf, mygroup)
d1 <- dPlot(
myvalue ~ myXaxis,
data = mydf,
type = 'line'
)
d1$xAxis(orderRule = 'myXaxis')
d1$colorAxis(
type = 'addColorAxis',
colorSeries = 'mygroup',
palette = c('red', 'blue'))
d1
library(rCharts)
myvalue <- c(16, 18, 5, 14, 10)
myXaxis <- c(1,2,3,4,5)
mygroup <- c(1, 1, 1, 2, 2)
mydf <- data.frame(myvalue, myXaxis, myfactor)
d1 <- dPlot(
myvalue ~ myXaxis,
data = mydf,
type = 'line'
)
d1$xAxis(orderRule = 'myXaxis')
d1$colorAxis(
type = 'addColorAxis',
colorSeries = 'mygroup',
palette = c('red', 'blue'))
d1
library(rCharts)
myvalue <- c(16, 18, 5, 14, 10)
myXaxis <- c(1,2,3,4,5)
mygroup <- c(1, 1, 1, 2, 2)
mydf <- data.frame(myvalue, myXaxis, mygroup)
d1 <- dPlot(
myvalue ~ myXaxis,
data = mydf,
type = 'line'
)
d1$xAxis(orderRule = 'myXaxis')
d1$colorAxis(
type = 'addColorAxis',
colorSeries = 'mygroup',
palette = c('red', 'blue'))
d1
d1$publish('Line with multiple colors in dimple/rCharts')
source('~/GitHub/teaching-with-datavis/pyramids/rcharts_pyramids.R')
dPyramid('US', 2014)
require(rCharts)
df <- data.frame(
"grp" = LETTERS[1:6],
"value" = runif(6)
)
d1 <- dPlot(
value ~ grp,
groups = "grp",
data = df,
type = "bar"
)
d1$setTemplate(
afterScript =
"<script>
myChart.axes.filter(function(ax){return ax.position == 'x'})[0].titleShape.text('label my x')
myChart.axes.filter(function(ax){return ax.position == 'y'})[0].titleShape.text('custom y label')
</script>
")
d1
data <- read.delim(
"http://pmsi-alignalytics.github.io/dimple/data/example_data.tsv"
)
### eliminate . to avoid confusion in javascript
colnames(data) <- gsub("[.]","",colnames(data))
require(rCharts)
d1 <- dPlot(
SalesValue~Price,
groups = c("SKU", "Channel", "Owner"),
data = subset(data, Date == "01/12/2012"),
type = "bubble",
height = 380,
width = 590,
bounds = list(x=60, y=30, width=420, height=310),
xlab = "I am a changed x", #example of a custom x label
ylab = "I am a changed y"
)
d1$xAxis( type = "addMeasureAxis" )
d1$yAxis( type = "addMeasureAxis" )
d1$legend(
x = 530,
y = 100,
width = 60,
height = 300,
horizontalAlign = "right"
)
d1$setTemplate(
afterScript =
'<script>
myChart.axes.filter(function(ax){return ax.position == "x"})[0].titleShape.text(opts.xlab)
myChart.axes.filter(function(ax){return ax.position == "y"})[0].titleShape.text(opts.ylab)
// This is a critical step.  By doing this we orphan the legend. This
// means it will not respond to graph updates.  Without this the legend
// will redraw when the chart refreshes removing the unchecked item and
// also dropping the events we define below.
myChart.legends = [];
// This block simply adds the legend title. I put it into a d3 data
// object to split it onto 2 lines.  This technique works with any
// number of lines, it isn\'t dimple specific.
svg.selectAll("title_text")
.data(["Click legend to","show/hide owners:"])
.enter()
.append("text")
.attr("x", 499)
.attr("y", function (d, i) { return 90 + i * 14; })
.style("font-family", "sans-serif")
.style("font-size", "10px")
.style("color", "Black")
.text(function (d) { return d; });
// Get a unique list of Owner values to use when filtering
var filterValues = dimple.getUniqueValues(data, "Owner");
// Get all the rectangles from our now orphaned legend
l.shapes.selectAll("rect")
// Add a click event to each rectangle
.on("click", function (e) {
// This indicates whether the item is already visible or not
var hide = false;
var newFilters = [];
// If the filters contain the clicked shape hide it
filterValues.forEach(function (f) {
if (f === e.aggField.slice(-1)[0]) {
hide = true;
} else {
newFilters.push(f);
}
});
// Hide the shape or show it
if (hide) {
d3.select(this).style("opacity", 0.2);
} else {
newFilters.push(e.aggField.slice(-1)[0]);
d3.select(this).style("opacity", 0.8);
}
// Update the filters
filterValues = newFilters;
// Filter the data
myChart.data = dimple.filterData(data, "Owner", filterValues);
// Passing a duration parameter makes the chart animate. Without
// it there is no transition
myChart.draw(800);
myChart.axes.filter(function(ax){return ax.position == "x"})[0].titleShape.text(opts.xlab)
myChart.axes.filter(function(ax){return ax.position == "y"})[0].titleShape.text(opts.ylab)
});
</script>'
)
d1
install.packages('swirl')
library(swirl)
swirl()
plot(child ~ parent, galton)
plot(jitter(child, 4) ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
ravenDAta
ravenData
mdl <- glm(ravenWinNum ~ ravenScore, family = "binomial", data = ravenData)
lodds <- predict(mdl, data.frame(ravenScore = c(0, 3, 6)))
exp(lodds) / (1 + exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
source('~/GitHub/teaching-with-datavis/pyramids/rcharts_pyramids.R')
dPyramid('US', 2014)
library(devtools)
install_github('timelyportfolio/rCharts@dimple_v2.0.0')
source('~/GitHub/teaching-with-datavis/pyramids/rcharts_pyramids.R')
dPyramid('US', 2014)
nPyramid('US', 2014)
install_github('ramnathv/rcharts@dev')
nPyramid('US', 2014)
hPyramid('US, 2014')
hPyramid('US, 2014)
q
)
''
'
hPyramid('US', 2014)
?cor
theme: readable
e
pi
source('~/GitHub/teaching-with-datavis/tfr-in-europe.R')
tfrPlot
devtools::install_github('ramnathv/slidify')
library(devtools)
install_github('timelyportfolio/rCharts@dimple_v2.0.0')
source('~/GitHub/teaching-with-datavis/pyramids/rcharts_pyramids.R')
setwd("~/GitHub/teaching-with-datavis/pyramids")
nPyramid('US', 2014)
d1 <- dPyramid('US', seq(2000, 2050, 10))
d1$save('usatest.html', cdn = TRUE)
