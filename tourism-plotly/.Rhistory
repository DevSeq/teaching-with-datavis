View(corr)
corr <- summarise(metros,
cdiff = cor(distance, boomerdiff, use="pairwise.complete.obs"),
clq = cor(distance, lqdiff, use="pairwise.complete.obs"),
cgro = cor(distance, boomergro, use="pairwise.complete.obs")
)
View(corr)
library(dplyr)
library(foreign)
dat <- read.dta("C:/Users/kylewalker/Documents/Research/Migration/Boomer migration/derived/boomer_merged.dta")
# metros <- group_by(dat, metroid)
#
# diff <- summarise(metros,
#                   diff = sum(boomerdiff))
#
# diff <- diff[order(-diff$diff),]
#
# corr <- summarise(metros,
#                   cdiff = cor(distance, boomerdiff, use="pairwise.complete.obs"),
#                   clq = cor(distance, lqdiff, use="pairwise.complete.obs"),
#                   cgro = cor(distance, boomergro, use="pairwise.complete.obs")
#                   )
## Better dplyr analysis
summary <- dat %.%
group_by(metroid) %.%
summarise(
diff = sum(boomerdiff),
cdiff = cor(distance, boomerdiff, use="pairwise.complete.obs"),
clq = cor(distance, lqdiff, use="pairwise.complete.obs"),
cgro = cor(distance, boomergro, use="pairwise.complete.obs")) %.%
arrange(clq)
library(dplyr)
library(foreign)
dat <- read.dta("C:/Users/kylewalker/Documents/Research/Migration/Boomer migration/derived/boomer_merged.dta")
# metros <- group_by(dat, metroid)
#
# diff <- summarise(metros,
#                   diff = sum(boomerdiff))
#
# diff <- diff[order(-diff$diff),]
#
# corr <- summarise(metros,
#                   cdiff = cor(distance, boomerdiff, use="pairwise.complete.obs"),
#                   clq = cor(distance, lqdiff, use="pairwise.complete.obs"),
#                   cgro = cor(distance, boomergro, use="pairwise.complete.obs")
#                   )
## Better dplyr analysis
summary <- dat %.%
group_by(metroid) %.%
summarise(
diff = sum(boomerdiff),
cdiff = cor(distance, boomerdiff, use="pairwise.complete.obs"),
clq = cor(distance, lqdiff, use="pairwise.complete.obs"),
cgro = cor(distance, boomergro, use="pairwise.complete.obs")) %.%
arrange(clq)
View(summary)
## Script to produce ggplot2 plots for AAG 2014 ##
library(foreign)
library(ggplot2)
library(plotly)
dat.tsp <- dat[dat$metroid == 45300,]
sub.tsp <- dat.tsp[dat.tsp$boomergro < 200, ]
tsp.gro <- ggplot(sub.tsp, aes(distmiles, boomergro))
tsp.gro + geom_point() + stat_smooth()
library(dplyr)
library(dplyr)
library(foreign)
dat <- read.dta("C:/Users/kylewalker/Documents/Research/Migration/Boomer migration/derived/boomer_merged.dta")
# metros <- group_by(dat, metroid)
#
# diff <- summarise(metros,
#                   diff = sum(boomerdiff))
#
# diff <- diff[order(-diff$diff),]
#
# corr <- summarise(metros,
#                   cdiff = cor(distance, boomerdiff, use="pairwise.complete.obs"),
#                   clq = cor(distance, lqdiff, use="pairwise.complete.obs"),
#                   cgro = cor(distance, boomergro, use="pairwise.complete.obs")
#                   )
## Better dplyr analysis
summary <- dat %.%
filter(boomergro < 200) %.%
group_by(metroid) %.%
summarise(
diff = sum(boomerdiff),
cdiff = cor(distance, boomerdiff, use="pairwise.complete.obs"),
clq = cor(distance, lqdiff, use="pairwise.complete.obs"),
cgro = cor(distance, boomergro, use="pairwise.complete.obs")) %.%
arrange(clq)
View(summary)
## Script to produce ggplot2 plots for AAG 2014 ##
library(foreign)
library(ggplot2)
#library(plotly)
dat.tsp <- dat[dat$metroid == 45300,]
tsp.gro <- ggplot(dat.tsp, aes(distmiles, boomergro))
tsp.gro + geom_point() + stat_smooth()
sub.tsp <- dat.tsp[dat.tsp$boomergro < 200, ]
tsp.diff <- ggplot(sub.tsp, aes(distmiles, boomerdiff))
tsp.diff + geom_point() + stat_smooth() + theme_bw()
?apply
?sapply
library(ggplot2)
library(plotly)
library(countrycode)
library(WDI)
api_key <- "igj7twgt9q"
countries <- c("India", "Pakistan", "Nepal", "Bhutan", "Bangladesh", "Sri Lanka")
codes <- c()
sapply(countries, function(x) c(codes, countrycode(x, "country.name", "iso2c")))
codes <- sapply(countries, function(x) c(codes, countrycode(x, "country.name", "iso2c")))
library(ggplot2)
library(plotly)
library(countrycode)
library(WDI)
api_key <- "igj7twgt9q"
countries <- c("India", "Pakistan", "Nepal", "Bhutan", "Bangladesh", "Sri Lanka")
codes <- c()
codes <- sapply(countries, function(x) c(codes, countrycode(x, "country.name", "iso2c")) return(codes))
library(ggplot2)
library(plotly)
library(countrycode)
library(WDI)
api_key <- "igj7twgt9q"
countries <- c("India", "Pakistan", "Nepal", "Bhutan", "Bangladesh", "Sri Lanka")
codes <- c()
codes <- sapply(countries, function(x) c(codes, countrycode(x, "country.name", "iso2c")))
codes <- sapply(countries, function(x) c(countrycode(x, "country.name", "iso2c")))
sapply(countries, function(x) c(countrycode(x, "country.name", "iso2c")))
codes
codes[2]
codes[2,]
codes[2,1]
library(ggplot2)
library(plotly)
library(countrycode)
library(WDI)
api_key <- "igj7twgt9q"
countries <- c("India", "Pakistan", "Nepal", "Bhutan", "Bangladesh", "Sri Lanka")
codes <- c()
# sapply(countries, function(x) c(countrycode(x, "country.name", "iso2c")))
for (c in countries) {
code <- countrycode(c, "country.name", "iso2c")
codes <- c(codes, code)
}
source('~/Research/Migration/Boomer migration/aag2014/migrants.R')
educplot <- ggplot(boomereduc, aes(x = year, y = avgdist, color = education)) +
geom_line(size = 1, aes(group = factor)) +
geom_point(size = 4) +
theme_bw() +
geom_hline(yintercept = 0, color = "black", linetype = "dashed") +
labs(list(x = "ACS Year", y = "Average std. distance from city core", color = "")) +
theme(legend.position="bottom",
axis.title.y = element_text(size = 18),
axis.title.x = element_text(size = 18),
legend.text = element_text(size = 14))
educplot
View(boomereduc)
educplot <- ggplot(boomereduc, aes(x = year, y = avgdist, color = education)) +
geom_line(size = 1, aes(group = education)) +
geom_point(size = 4) +
theme_bw() +
geom_hline(yintercept = 0, color = "black", linetype = "dashed") +
labs(list(x = "ACS Year", y = "Average std. distance from city core", color = "")) +
theme(legend.position="bottom",
axis.title.y = element_text(size = 18),
axis.title.x = element_text(size = 18),
legend.text = element_text(size = 14))
educplot
genplot
source('~/Datavis/dimple_pyramids1.R')
dPyramid("CH", 2014)
source('~/Datavis/dimple_pyramids.R')
dPyramid("CH", 2014)
source('~/Datavis/rcharts_pyramids.R')
dPyramid1("US", 2014)
dPyramid("US", 2014)
hPyramid("US", 2014)
dPyramid("US", 2014)
source('~/Datavis/rcharts_pyramids.R')
dPyramid("US", 2014)
source('~/Datavis/rcharts_pyramids.R')
dPyramid("US", 2014)
source('~/.active-rstudio-document')
dPyramid("US", 2014)
hPyramid("US", 2014)
source('~/Datavis/rcharts_pyramids.R')
hPyramid("US", 2014)
source('~/Datavis/rcharts_pyramids.R')
hPyramid("US", 2014)
hPyramid("US", 2014, colors = c("red", "blue"))
hPyramid("QA", 2014, colors = c("red", "blue"))
dPyramid("QA", 2014, colors = c("red", "blue"))
library(rCharts)
library(reshape2)
cproj <- read.csv("http://www.census.gov/population/projections/files/summary/NP2012-T6.csv")
keep <- c(20:25, 32)
sub <- cproj[keep,]
names.new <- c("race.ethnicity", "y2015", "y2020", "y2025", "y2030", "y2035",
"y2040", "y2045", "y2050", "y2055", "y2060")
names(sub) <- names.new
sub.long <- melt(sub,
id.vars = "race.ethnicity",
variable.name = "year",
value.name = "percent")
sub.long$year <- gsub("y", "", sub.long$year)
sub.long$year <- as.numeric(sub.long$year)
sub.long$race.ethnicity <- gsub("\\.", "", sub.long$race.ethnicity)
sub.long$race.ethnicity <- gsub("HISPANIC", "Hispanic", sub.long$race.ethnicity)
sub.long$percent <- as.numeric(sub.long$percent)
keep.years <- seq(2015, 2055, 10)
sub.years <- sub.long[sub.long$year %in% keep.years, ]
## Build charts
chart1 <- nPlot(
percent ~ year,
group = "race.ethnicity",
data = sub.years,
type = "multiBarChart")
# Format chart options
chart1$yAxis(axisLabel = "Percent of total", width = 62)
chart1$xAxis(axisLabel = "Year")
chart1$chart(tooltipContent = "#! function(key, x, y){
return '<h3>' + key + '</h3>' +
'<p>' + y + '% in ' + x + '</p>'
} !#")
chart1
View(sub.years)
library(WDI)
library(rCharts)
library(plyr)
countries <- c("AL", "AT", "BE", "BA", "BG", "HR", "CZ", "DK", "FI", "FR", "DE", "GR",
"HU", "IS", "IE", "IT", "NL", "NO", "PL", "PT", "RO", "RS", "SK", "SI",
"ES", "SE", "CH", "GB")
tfr <- WDI(country = countries, indicator = "SP.DYN.TFRT.IN",
start = 1960, end = 2011, extra = FALSE)
oldage <- WDI(country = countries, indicator = "SP.POP.65UP.TO.ZS",
start = 1960, end = 2011, extra = FALSE)
# tfr.europe <- tfr[tfr$region == "Europe", ]
#
# oldage.europe <- oldage[oldage$region == "Europe", ]
# east <- c("AL", "BA", "BG", "HR", "CZ", "HU", "PL", "SK", "SI", "RS", "RO")
# west <- c("BE", "NL", "FR", "DE", "CH", "AT", "GB", "IE")
# scan <- c("DK", "IS", "SE", "NO", "FI")
# south <- c("ES", "IT", "GR", "PT")
#
# calcRegion <- function(x) {
#   x$region[x$iso2c %in% east] <- "Eastern Europe"
#   x$region[x$iso2c %in% west] <- "Western Europe"
#   x$region[x$iso2c %in% scan] <- "Scandinavia"
#   x$region[x$iso2c %in% south] <- "Southern Europe"
#
#   return(x)
# }
#
#
#
# tfr <- calcRegion(tfr)
# oldage <- calcRegion(oldage)
# tfr$TFR <- tfr$SP.DYN.TFRT.IN
# oldage$Percent.over.65 <- oldage$SP.POP.65UP.TO.ZS
tfr <- rename(tfr, replace = c("SP.DYN.TFRT.IN" = "TFR"))
oldage <- rename(oldage, replace = c("SP.POP.65UP.TO.ZS" = "Percent.over.65"))
tfr$TFR <- round(tfr$TFR, 2)
oldage$Percent.over.65 <- round(oldage$Percent.over.65, 2)
# tfr.plot <- hPlot(
#   x = "year",
#   y = "TFR",
#   data = tfr,
#   group = "country",
#   color = "region",
#   type = "line")
tfr.nplot <- nPlot(
TFR ~ year,
data = tfr,
group = "country",
type = "lineChart")
oldage.nplot <- nPlot(
Percent.over.65 ~ year,
data = oldage,
group = "country",
type = "lineChart")
tfr.nplot$yAxis(axisLabel = "Total fertility rate", width = 62)
tfr.nplot$xAxis(axisLabel = "Year")
View(tfr)
tfr.nplot$chart(tooltipContent = "#! function(key, x, y, e){
return '<h3>' + key + '(' + e.point.iso2c + ')' + '</h3>' +
'<p>' + y + ' in ' + x + '</p>'
} !#")
tfr.nplot
tfr.nplot$chart(tooltipContent = "#! function(key, x, y, e){
return '<h3>' + key + ' (' + e.point.iso2c + ')' + '</h3>' +
'<p>' + y + ' in ' + x + '</p>'
} !#")
tfr.nplot
tfr.nplot
library(WDI)
library(rCharts)
library(plyr)
countries <- c("AL", "AT", "BE", "BA", "BG", "HR", "CZ", "DK", "FI", "FR", "DE", "GR",
"HU", "IS", "IE", "IT", "NL", "NO", "PL", "PT", "RO", "RS", "SK", "SI",
"ES", "SE", "CH", "GB")
tfr <- WDI(country = countries, indicator = "SP.DYN.TFRT.IN", start = 1960, end = 2011)
#Clean up the data a bit
tfr <- rename(tfr, replace = c("SP.DYN.TFRT.IN" = "TFR"))
tfr$TFR <- round(tfr$TFR, 2)
# Create the chart
tfrPlot <- nPlot(
TFR ~ year,
data = tfr,
group = "country",
type = "lineChart")
# Add axis labels and format the tooltip
tfrPlot$yAxis(axisLabel = "Total fertility rate", width = 62)
tfrPlot$xAxis(axisLabel = "Year")
# Here, the 'e' parameter allows you to pass other variables to the tooltip, like 'iso2c' in this example.
tfrPlot$chart(tooltipContent = "#! function(key, x, y, e){
return '<h3>' + key + ' (' + e.point.iso2c + ')' + '</h3>' +
'<p>' + y + ' in ' + x + '</p>'
} !#")
tfrPlot
full <- read.csv("C:/Users/kylewalker/Documents/Teaching/World Regional/Data/WPP2012_DB02_POPULATIONS_ANNUAL.CSV")
jp <- full %.%
select(Location, Time, PopTotal, Variant) %.%
filter(Location == "Japan" & Variant == "Medium") %.%
mutate(PopM = round((PopTotal * 1000)), 2)
library(WDI)
library(rCharts)
library(ggplot2)
library(plotly)
library(countrycode)
library(dplyr)
jp <- full %.%
select(Location, Time, PopTotal, Variant) %.%
filter(Location == "Japan" & Variant == "Medium") %.%
mutate(PopM = round((PopTotal * 1000)), 2)
jp[which.max(jp$PopM), jp$Time]
?which.max
jp[which.max(,jp$PopM), jp$Time]
which.max(jp$PopM)
jp$Time[60,]
which(colnames(jp) == 'Time')
jp[which.max(jp$PopM), 2]
jpplot <- ggplot(jp, aes(x = Time, y = PopM)) +
geom_line(size = 1, color = "red") +
theme_bw() +
geom_vline(xintercept = jp[which.max(jp$PopM), 2] )
jpplot
jpplot <- ggplot(jp, aes(x = Time, y = PopM)) +
geom_line(size = 1, color = "red") +
theme_bw() +
geom_vline(xintercept = jp[which.max(jp$PopM), 2], linetype = "dashed" )
py <- plotly("walkerke", api_key)
py$ggplotly(jpplot)
api_key <- "igj7twgt9q"
py <- plotly("walkerke", api_key)
py$ggplotly(jpplot)
library(WDI)
library(rCharts)
library(ggplot2)
library(plotly)
library(countrycode)
library(dplyr)
library(ggthemes)
gdp <- "NY.GDP.MKTP.CD"
usjp <- WDI(country = c("US", "JP", "FR", "DE", "CN", "UK"), indicator = gdp, start = 1960, end = 2012, extra = FALSE)
usjp$var <- round(usjp$NY.GDP.MKTP.CD, 0)
g1 <- ggplot(usjp, aes(x = year, y = var, color = country)) +
geom_line(size = 1) +
theme_economist()
gdp <- "NY.GDP.MKTP.CD"
usjp <- WDI(country = c("US", "JP", "FR", "DE", "CN", "GB"), indicator = gdp, start = 1960, end = 2012, extra = FALSE)
usjp$var <- round(usjp$NY.GDP.MKTP.CD, 0)
g1 <- ggplot(usjp, aes(x = year, y = var, color = country)) +
geom_line(size = 1) +
theme_economist()
g1
source("C:/Users/kylewalker/Documents/Datavis/rcharts_pyramids.R")
## Asian Tigers plotly line chart
api_key <- "igj7twgt9q"
py <- plotly("walkerke", api_key)
py$ggplotly(g1)
py <- plotly("walkerke", api_key)
py$ggplotly(g1)
py$ggplotly(g1)
View(usjp)
gdp <- "NY.GDP.MKTP.CD"
usjp <- WDI(country = c("US", "JP", "FR", "DE", "CN", "GB"), indicator = gdp, start = 1970, end = 2012, extra = FALSE)
usjp$var <- round(usjp$NY.GDP.MKTP.CD, 0)
g1 <- ggplot(usjp, aes(x = year, y = var, color = country)) +
geom_line(size = 1) +
theme_economist()
py <- plotly("walkerke", api_key)
py$ggplotly(g1)
library(WDI)
library(rCharts)
library(ggplot2)
library(plotly)
library(countrycode)
#library(dplyr)
library(ggthemes)
source("C:/Users/kylewalker/Documents/Datavis/rcharts_pyramids.R")
## Write a function to grab country codes
getCodes <- function(countries, type) {
codes <- c()
for (c in countries) {
code <- countrycode(c, "country.name", type)
codes <- c(codes, code)
}
}
api_key <- "igj7twgt9q"
countries <- c("South Korea", "Hong Kong", "Singapore")
codes <- getCodes(countries, "iso2c")
getCodes <- function(countries, type) {
codes <- c()
for (c in countries) {
code <- countrycode(c, "country.name", type)
codes <- c(codes, code)
}
codes
}
codes <- getCodes(countries, "iso2c")
asean <- c("Indonesia", "Thailand", "Malaysia", "Singapore", "Philippines", "Vietnam",
"Myanmar", "Brunei", "Cambodia", "Laos")
asean_codes <- getCodes(asean, "iso2c")
asean_gdp <- WDI(country = asean_codes, indicator = "NY.GDP.MKTP.CD", start = 2012, extra = FALSE)
asean_gdp <- WDI(country = asean_codes, indicator = "NY.GDP.MKTP.CD", start = 2012, end = 2012, extra = FALSE)
View(asean_gdp)
asean_gdp <- WDI(country = asean_codes, indicator = "NY.GDP.PCAP.PP.CD", start = 2012, end = 2012, extra = FALSE)
View(asean_gdp)
library(dplyr)
asean_gdp <- asean_gdp %.%
mutate(gdp = NY.GDP.PCAP.PP.CD) %.%
arrange(desc(gdp))
View(asean_gdp)
asean_gdp <- asean_gdp %.%
mutate(gdp = NY.GDP.PCAP.PP.CD) %.%
arrange(desc(gdp)) %.%
filter(country != "Myanmar")
View(asean_gdp)
asean_plot <- ggplot(asean_gdp, aes(gdp)) +
geom_bar() + coord_flip()
asean_plot
asean_plot <- ggplot(asean_gdp, aes(x = country, y = gdp)) +
geom_bar() + coord_flip()
asean_plot
asean_plot <- ggplot(asean_gdp, aes(x = country, y = gdp), stat = "identity") +
geom_bar() + coord_flip()
asean_plot
asean_plot <- ggplot(asean_gdp, aes(x = reorder(country, gdp), y = gdp), stat = "identity") +
geom_bar() + coord_flip()
asean_plot <- ggplot(asean_gdp, aes(x = reorder(country, gdp), y = gdp), stat = "identity") +
geom_bar() + coord_flip()
asean_plot
asean_plot <- ggplot(asean_gdp, aes(x = reorder(country, gdp), y = gdp), stat = "identity") +
geom_bar(color = "green") + coord_flip()
asean_plot
asean_plot <- ggplot(asean_gdp, aes(x = reorder(country, gdp), y = gdp), stat = "identity") +
geom_bar(fill = "green") + coord_flip()
asean_plot
asean_plot <- ggplot(asean_gdp, aes(x = reorder(country, gdp), y = gdp), stat = "identity") +
geom_bar(fill = "darkgreen") + coord_flip()
asean_plot
py <- plotly("walkerke", api_key)
py$ggplotly(asean_plot)
2 + 2
3 / 4
int(3 / 4)
as.integer(3 / 4)
install.packages(c("acs", "BH", "caret", "caTools", "class", "clValid", "data.table", "deldir", "devtools", "dplyr", "evaluate", "foreach", "foreign", "gdata", "ggthemes", "googleVis", "gtools", "httpuv", "httr", "installr", "iterators", "jsonlite", "maptools", "markdown", "MASS", "memoise", "mgcv", "nlme", "nnet", "plyr", "psych", "Rcpp", "reshape", "reshape2", "rgdal", "rgeos", "rgl", "RgoogleMaps", "RJSONIO", "scales", "sp", "spatial", "spdep", "testthat", "XLConnect", "xlsxjars", "xtable", "yaml", "zoo"))
install.packages('acs')
install.packages('rgl')
source('~/Datavis/rcharts_pyramids.R')
d <- dPyramid("US", seq(1980, 2050, 10))
source('~/Datavis/rcharts_pyramids.R')
d <- dPyramid("US", seq(1980, 2050, 10))
d
h <- hPyramid("US", seq(1980, 2050, 10))
h <- hPyramid("US", 2014)
h
setwd("~/GitHub/teaching-with-datavis/tourism-plotly")
# Load packages and data
library(reshape2)
library(ggplot2)
library(plotly)
library(zoo)
dat <- read.csv('tourism.csv')
## Define the "tidy" function and call it
tidy_WTTC <- function(df) {
start <- df[7, 2]
end <- df[7, ncol(df)]
df <- df[8:nrow(df), ]
nms <- c("country", paste0("y", seq(start, end, 1)))
names(df) <- nms
df <- na.locf(df, fromLast = TRUE)
df <- df[seq(1, nrow(df), 2), ]
df.melt <- melt(df, id.vars = "country", value.name="value", variable.name = "year")
df.melt$year <- as.numeric(gsub("y", "", df.melt$year))
df.melt$value <- as.numeric(df.melt$value)
df.melt
}
tidy_dat <- tidy_WTTC(dat)
## Create the ggplot, initialize the plotly object, and convert the ggplot to plotly
t1 <- ggplot(tidy_dat, aes(x = year, y = value, color = country)) +
geom_line(size = 2) +
scale_color_brewer(palette = "Set1") +
labs(list(x = "Year",
y = "Total contribution of tourism to GDP (percent)",
title = "Total contribution of tourism to GDP (percent), select Pacific Island countries.  Data source: WTTC"))
t1
py <- plotly("walkerke", "igj7twgt9q")
py$ggplotly(t1)
